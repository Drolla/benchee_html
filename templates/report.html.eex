<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf8">
    <script src="assets/javascripts/plotly-latest.min.js"></script>
  </head>
  <body>

    <article>
      <h2>Comparison</h2>
      <section>
        <h3>Data Table</h3>
        <table>
          <thead>
            <tr>
              <th>Name</th>
              <th>Iterations per Second</th>
              <th>Average</th>
              <th>Deviation</th>
              <th>median</th>
            </tr>
          </thead>
          <tbody>
            <%= for {name, statistics} <- suite.statistics do %>
              <tr>
                <td><%= name %></td>
                <td><%= statistics.ips %></td>
                <td><%= statistics.average %></td>
                <td><%= statistics.std_dev_ratio %>%</td>
                <td><%= statistics.median %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </section>

      <section>
        <div id="ips-comparison"></div>
      </section>

      <section>
        <div id="box-plot"></div>
      </section>
    </article>

    <%= for {name, _} <- suite.run_times do %>
      <article>
        <h2> <%= name %></h2>
        <section>
          <div class="sorted-run-times" data-job-name="<%= name %>"></div>
        </section>
        <section>
          <div class="raw-run-times" data-job-name="<%= name %>"></div>
        </section>
      </article>
    <% end %>

    <script>
      var eachProperty = function(object, fun) {
        console.log(object);
        for (var property in object) {
          if (object.hasOwnProperty(property)) {
            fun(property, object)
          }
        }
      };


      var runtimeHistogramData = function(runTimeData) {
        var data = [
          {
            type: 'histogram',
            x: runTimeData
          }
        ];

        return data;
      };

      var drawGraph = function(node, data, layout) {
        Plotly.newPlot(node, data, layout);
      };

      var rawRunTimeData = function(runTimeData) {

        var data = [
          {
            y: runTimeData,
            type: 'bar'
          }
        ];

        return data;
      };

      var ipsComparisonData = function(statistics) {
        var names = [];
        var ips = [];
        var errors = [];
        for (var name in statistics) {
          if (statistics.hasOwnProperty(name)) {
            names.push(name);
            ips.push(statistics[name]['ips']);
            errors.push(statistics[name]['std_dev_ips']);
          }
        };

        var data = [
          {
            type: 'bar',
            x: names,
            y: ips,
            error_y: {
              type: 'data',
              array: errors,
              visible: true
            }
          }
        ];

        return data;
      };

      var boxPlotData = function(runTimes) {
        data = []
        eachProperty(runTimes, function(name, runTime) {
          data.push({
            name: name,
            y: runTime[name],
            type: 'box'
          })
        });

        return data;
      };

      var drawIpsComparisonChart = function(statistics) {
        var ipsNode = document.getElementById("ips-comparison");
        var layout = {title: "Iterations per Second"}
        drawGraph(ipsNode, ipsComparisonData(statistics), layout);
      };

      var drawComparisonBoxPlot = function(runTimes) {
        var boxNode = document.getElementById("box-plot");
        var layout = {title: "Run Time Boxplot"}
        drawGraph(boxNode, boxPlotData(runTimes), layout);
      };

      var drawRawRunTimeCharts = function(runTimes) {
        var runTimeNodes = document.getElementsByClassName("raw-run-times");
        var runTimesNodesArray = Array.from(runTimeNodes); // Oh JavaScript
        runTimesNodesArray.forEach(function(node) {
          var jobName = node.getAttribute("data-job-name");
          var runTimeData = runTimes[jobName];
          var layout = {title: jobName + " Raw Run Times"}
          drawGraph(node, rawRunTimeData(runTimeData), layout);
        });
      };

      var drawRunTimeHistograms = function(runTimes) {
        var runTimeHistogramNodes = document.getElementsByClassName("sorted-run-times");
        var runTimeHistogramNodesArray = Array.from(runTimeHistogramNodes); // Oh JavaScript
        runTimeHistogramNodesArray.forEach(function(node) {
          var jobName = node.getAttribute("data-job-name");
          var runTimeData = runTimes[jobName];
          var layout = {title: jobName + " Run Times Histogram"}
          drawGraph(node, runtimeHistogramData(runTimeData), layout);
        });
      };

      var suite = <%= suite_json %>;
      var runTimes = suite.run_times;
      var statistics = suite.statistics;

      drawIpsComparisonChart(statistics);
      drawComparisonBoxPlot(runTimes);
      drawRawRunTimeCharts(runTimes);
      drawRunTimeHistograms(runTimes);
    </script>
  </body>
</html>
